AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Frontend CI/CD
Parameters:
  GitHubToken:
    Type: String
  PhotoBucketName:
    Type: String
Resources:
  SrcBucket:
    Type: AWS::S3::Bucket

  ESPhotos:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: "photos"
      ElasticsearchVersion: "7.9"
      ElasticsearchClusterConfig:
        InstanceCount: "1"
        InstanceType: "t2.small.elasticsearch"
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: "gp2"
      AccessPolicies: 
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS:
                - !GetAtt IndexLambdaRole.Arn
                - !GetAtt SearchLambdaRole.Arn
            Action: "es:*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/photos/*"

  IndexLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSQuickSightElasticsearchPolicy"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  IndexLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "index-photos"
      Description: "Index new photos in the photos buckets with rekognition labels"
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt IndexLambdaRole.Arn
      Runtime: "python3.8"
      Timeout: 10
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
            return {
              'statusCode': 200,
              'body': json.dumps('Hello from Lambda!')
            }

  IndexS3Invoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt IndexLambdaFunction.Arn
      Principal: "s3.amazonaws.com"
      SourceArn: !Sub "arn:aws:s3:::${PhotoBucketName}"

  SearchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonLexRunBotsOnly"
        - "arn:aws:iam::aws:policy/AmazonESReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  SearchLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "search-photos"
      Description: "Parse a user query using Lex and send back photo urls"
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt SearchLambdaRole.Arn
      Runtime: "python3.8"
      Timeout: 10
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
            return {
              'statusCode': 200,
              'body': json.dumps('Hello from Lambda!')
            }

  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref PhotoBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:Put"
            Function: !GetAtt IndexLambdaFunction.Arn
    DependsOn: IndexS3Invoke

  S3ProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:PutObject"
                Resource: !Sub "${PhotoBucket.Arn}/*"
          PolicyName: !Sub "${PhotoBucket}-Put"

  GalleryRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        openapi: "3.0.1"
        info:
          title: "AI Photo Search"
          description: "AI Photo Search application, built during the Cloud and Big Data course\
            \ at Columbia University."
          version: "1.0.0"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              parameters:
              - name: "q"
                in: "query"
                schema:
                  type: "string"
              responses:
                "500":
                  description: "500 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/SearchResponse"
                "403":
                  description: "403 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchLambdaFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /upload/{key}:
            put:
              parameters:
              - name: "Content-Type"
                in: "header"
                schema:
                  type: "string"
              - name: "key"
                in: "path"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Content-Type:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/MODEL498d78"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                type: "aws"
                credentials: !GetAtt S3ProxyRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/${PhotoBucket}/{object}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.path.object: "method.request.path.key"
                passthroughBehavior: "when_no_match"
                httpMethod: "PUT"
                contentHandling: "CONVERT_TO_BINARY"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
        components:
          schemas:
            Error:
              type: "object"
              properties:
                code:
                  type: "integer"
                  format: "int32"
                message:
                  type: "string"
            Photo:
              type: "object"
              properties:
                url:
                  type: "string"
                labels:
                  type: "array"
                  items:
                    type: "string"
            MODEL498d78:
              type: "object"
              properties: {}
            SearchResponse:
              type: "object"
              properties:
                results:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/Photo"
          securitySchemes:
            api_key:
              type: "apiKey"
              name: "x-api-key"
              in: "header"
        x-amazon-apigateway-binary-media-types:
        - "image/jpg"
        - "image/jpeg"
        - "image/png"

  SearchApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt SearchLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryRestApi}/*/GET/search"

  GalleryApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref GalleryRestApi
      StageName: "beta"
    
  GalleryApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      StageKeys:
        - RestApiId: !Ref GalleryRestApi
          StageName: "beta"
      Value: "4nLMG3Rghf5D0f6HloQ13sKMSPgx3p76Um6ziij8"
    DependsOn: GalleryApiDeployment

  ClientBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: "PublicRead"
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "index.html"

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub "${ClientBucket.Arn}/*"
      Bucket: !Ref ClientBucket

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: lambda-code-build-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                  - !Sub arn:aws:s3:::${SrcBucket}/*
                  - !Sub arn:aws:s3:::${ClientBucket}/*
                  - !Sub arn:aws:s3:::${ClientBucket}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListObjects
              - Resource: 
                  - !GetAtt IndexLambdaFunction.Arn
                  - !GetAtt SearchLambdaFunction.Arn
                Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
              - Resource: !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${GalleryRestApi}/stages/beta/sdks/javascript
                Effect: Allow
                Action:
                  - apigateway:GET
                  
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: code-pipeline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${SrcBucket}/*
                  - !Sub arn:aws:s3:::${ClientBucket}/*
                  - !Sub arn:aws:s3:::${ClientBucket}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListObjects
              - Resource:
                  - arn:aws:s3:::*
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource: "*"
                Effect: Allow
                Action:
                  - lambda:*

  LambdaBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:4.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Name: !Sub ${AWS::StackName}-build-lambda
      ServiceRole: !Ref CodeBuildServiceRole

  LambdaPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref SrcBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: "DhruvVajpeyi"
                Repo: "photo-gallery"
                Branch: "lambda-main"
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: Lambdas
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: LambdaBuildStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref LambdaBuildProject
              InputArtifacts:
                - Name: Lambdas
              OutputArtifacts:
                - Name: LambdaBuild
              RunOrder: 1

  ClientBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: !Sub |
          version: 0.1
          phases:
            install:
              commands:
                - apt-get update
                - apt-get -y upgrade
                - apt-get install zip unzip -y
                - aws apigateway get-sdk --rest-api-id ${GalleryRestApi} --stage-name beta --sdk-type javascript ~/client/assets/js/sdk.zip
            build:
              commands:
                - cd client/assets/js
                - ls
                - unzip sdk.zip
                - cd ../..
                - aws s3 cp . s3://${ClientBucket} --recursive > deploymentResult.txt
          artifacts:
            files:
              - build/deploymentResult.txt
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:4.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Name: !Sub ${AWS::StackName}-build-client
      ServiceRole: !Ref CodeBuildServiceRole

  ClientPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref SrcBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: "DhruvVajpeyi"
                Repo: "photo-gallery"
                Branch: "client-main"
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: ClientBuildStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ClientBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: AppBuild
              RunOrder: 1

Outputs:
  WebsiteURL:
    Value: !GetAtt
      - ClientBucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - ClientBucket
          - DomainName
    Description: Name of S3 bucket to hold website content
